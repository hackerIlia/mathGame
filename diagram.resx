<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAZGRkKIiIisCMjI/8jIyP/IyMj/yIiIpsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAciIiKyIyMj/yMjI/8jIyP/IiIi2wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAISEhgiIiIvwjIyP/IyMj/yMjI/8iIiL+GxsbHAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGRkZFCEhIVsiIiKkIiIi6iMjI/8hISFcAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACISEhNiAg
        ID4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////////8HAwYPBwMGDwcDBg8HAwYPBwMGDwcDBg8HAwYPBwMGDwcD
        Bg8HAwYPBwMGDwcDBg8DAwYPAQMGDwADBg/gAAIP8AAAD/wAAA/+AOAP/wH4D/+H/A//z/4B////Af//
        /4H///+B////gP///8D////4//////////8=
</value>
  </data>
</root>